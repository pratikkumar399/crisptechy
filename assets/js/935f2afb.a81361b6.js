"use strict";(self.webpackChunkcrisptechy=self.webpackChunkcrisptechy||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"category","label":"NodeJs","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"ChildProcess","href":"/crisptechy/docs/NodeJs/ChildProcess","docId":"NodeJs/ChildProcess"},{"type":"link","label":"CommonJs","href":"/crisptechy/docs/NodeJs/CommonJs","docId":"NodeJs/CommonJs"},{"type":"link","label":"Node_intro","href":"/crisptechy/docs/NodeJs/Node_intro","docId":"NodeJs/Node_intro"},{"type":"link","label":"Os_module","href":"/crisptechy/docs/NodeJs/Os_module","docId":"NodeJs/Os_module"},{"type":"link","label":"Pathmodule","href":"/crisptechy/docs/NodeJs/Pathmodule","docId":"NodeJs/Pathmodule"}]},{"type":"category","label":"OOPS","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Cohesion_Coupling","href":"/crisptechy/docs/OOPS/Cohesion_Coupling","docId":"OOPS/Cohesion_Coupling"},{"type":"link","label":"OOPS in C++","href":"/crisptechy/docs/OOPS/OOPS_IN_CPP","docId":"OOPS/OOPS_IN_CPP"}]},{"type":"category","label":"dsaconcepts","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"binarysearch","href":"/crisptechy/docs/dsaconcepts/BinarySearch/","docId":"dsaconcepts/BinarySearch/binarysearch"},{"type":"category","label":"DynamicProgramming","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"Knapsack","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"PartitionEqualSubsetSum","href":"/crisptechy/docs/dsaconcepts/DynamicProgramming/KnapSack/PartitionEqualSubsetSum","docId":"dsaconcepts/DynamicProgramming/KnapSack/PartitionEqualSubsetSum"},{"type":"link","label":"SubsetSum","href":"/crisptechy/docs/dsaconcepts/DynamicProgramming/KnapSack/SubsetSum","docId":"dsaconcepts/DynamicProgramming/KnapSack/SubsetSum"}],"href":"/crisptechy/docs/dsaconcepts/DynamicProgramming/KnapSack/"},{"type":"link","label":"intro","href":"/crisptechy/docs/dsaconcepts/DynamicProgramming/intro","docId":"dsaconcepts/DynamicProgramming/intro"}]},{"type":"link","label":"gitnotes","href":"/crisptechy/docs/dsaconcepts/GitNotes/","docId":"dsaconcepts/GitNotes/gitnotes"},{"type":"category","label":"Graphs","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"KhansAlgorithm","href":"/crisptechy/docs/dsaconcepts/Graphs/KhansAlgorithm","docId":"dsaconcepts/Graphs/KhansAlgorithm"},{"type":"link","label":"bfsalgorithms","href":"/crisptechy/docs/dsaconcepts/Graphs/bfsalgorithms","docId":"dsaconcepts/Graphs/bfsalgorithms"},{"type":"link","label":"Bipartite Graph","href":"/crisptechy/docs/dsaconcepts/Graphs/bipartitegraph","docId":"dsaconcepts/Graphs/bipartitegraph"},{"type":"link","label":"cycle_dfs_bfs_undirected","href":"/crisptechy/docs/dsaconcepts/Graphs/cycle_dfs_bfs_undirected","docId":"dsaconcepts/Graphs/cycle_dfs_bfs_undirected"},{"type":"link","label":"dijkstraalgorithm","href":"/crisptechy/docs/dsaconcepts/Graphs/dijkstraalgorithm","docId":"dsaconcepts/Graphs/dijkstraalgorithm"},{"type":"link","label":"graphrepresentation","href":"/crisptechy/docs/dsaconcepts/Graphs/graphrepresentation","docId":"dsaconcepts/Graphs/graphrepresentation"},{"type":"link","label":"topologicalsort","href":"/crisptechy/docs/dsaconcepts/Graphs/topologicalsort","docId":"dsaconcepts/Graphs/topologicalsort"}]},{"type":"category","label":"Trees","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"Ancestors","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"LowestCommonAncestors","href":"/crisptechy/docs/dsaconcepts/Trees/Ancestors/LowestCommonAncestors","docId":"dsaconcepts/Trees/Ancestors/LowestCommonAncestors"}]},{"type":"category","label":"IntuitiveBinaryTrees","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"SameTree","href":"/crisptechy/docs/dsaconcepts/Trees/IntuitiveBinaryTrees/SameTree","docId":"dsaconcepts/Trees/IntuitiveBinaryTrees/SameTree"}]},{"type":"category","label":"Traversals","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"inordertraversal","href":"/crisptechy/docs/dsaconcepts/Trees/Traversals/inordertraversal","docId":"dsaconcepts/Trees/Traversals/inordertraversal"},{"type":"link","label":"levelordertraversal","href":"/crisptechy/docs/dsaconcepts/Trees/Traversals/levelordertraversal","docId":"dsaconcepts/Trees/Traversals/levelordertraversal"},{"type":"link","label":"postordertraversal","href":"/crisptechy/docs/dsaconcepts/Trees/Traversals/postordertraversal","docId":"dsaconcepts/Trees/Traversals/postordertraversal"},{"type":"link","label":"preordertraversal","href":"/crisptechy/docs/dsaconcepts/Trees/Traversals/preordertraversal","docId":"dsaconcepts/Trees/Traversals/preordertraversal"}]},{"type":"link","label":"binarytree","href":"/crisptechy/docs/dsaconcepts/Trees/binarytree","docId":"dsaconcepts/Trees/binarytree"}]}]},{"type":"link","label":"intro","href":"/crisptechy/docs/intro","docId":"intro"}]},"docs":{"dsaconcepts/BinarySearch/binarysearch":{"id":"dsaconcepts/BinarySearch/binarysearch","title":"binarysearch","description":"Binary Search is a searching algorithm .","sidebar":"tutorialSidebar"},"dsaconcepts/DynamicProgramming/intro":{"id":"dsaconcepts/DynamicProgramming/intro","title":"intro","description":"Dynammic Programming","sidebar":"tutorialSidebar"},"dsaconcepts/DynamicProgramming/KnapSack/Knapsack":{"id":"dsaconcepts/DynamicProgramming/KnapSack/Knapsack","title":"Knapsack","description":"0/1 Knapsack Problem","sidebar":"tutorialSidebar"},"dsaconcepts/DynamicProgramming/KnapSack/PartitionEqualSubsetSum":{"id":"dsaconcepts/DynamicProgramming/KnapSack/PartitionEqualSubsetSum","title":"PartitionEqualSubsetSum","description":"Partition Equal Subset Sum","sidebar":"tutorialSidebar"},"dsaconcepts/DynamicProgramming/KnapSack/SubsetSum":{"id":"dsaconcepts/DynamicProgramming/KnapSack/SubsetSum","title":"SubsetSum","description":"Problem Statement","sidebar":"tutorialSidebar"},"dsaconcepts/GitNotes/gitnotes":{"id":"dsaconcepts/GitNotes/gitnotes","title":"gitnotes","description":"","sidebar":"tutorialSidebar"},"dsaconcepts/Graphs/bfsalgorithms":{"id":"dsaconcepts/Graphs/bfsalgorithms","title":"bfsalgorithms","description":"","sidebar":"tutorialSidebar"},"dsaconcepts/Graphs/bipartitegraph":{"id":"dsaconcepts/Graphs/bipartitegraph","title":"Bipartite Graph","description":"Statement : There is an undirected graph with n nodes where each node is numbered from 0 to n-1.","sidebar":"tutorialSidebar"},"dsaconcepts/Graphs/cycle_dfs_bfs_undirected":{"id":"dsaconcepts/Graphs/cycle_dfs_bfs_undirected","title":"cycle_dfs_bfs_undirected","description":"Cycle detection In Undirected Graph","sidebar":"tutorialSidebar"},"dsaconcepts/Graphs/dijkstraalgorithm":{"id":"dsaconcepts/Graphs/dijkstraalgorithm","title":"dijkstraalgorithm","description":"Dijkstra algorithm","sidebar":"tutorialSidebar"},"dsaconcepts/Graphs/graphrepresentation":{"id":"dsaconcepts/Graphs/graphrepresentation","title":"graphrepresentation","description":"So there are two ways to represent a graph","sidebar":"tutorialSidebar"},"dsaconcepts/Graphs/KhansAlgorithm":{"id":"dsaconcepts/Graphs/KhansAlgorithm","title":"KhansAlgorithm","description":"Khan\'s Algorithm for topoSort","sidebar":"tutorialSidebar"},"dsaconcepts/Graphs/topologicalsort":{"id":"dsaconcepts/Graphs/topologicalsort","title":"topologicalsort","description":"Topological Sort","sidebar":"tutorialSidebar"},"dsaconcepts/Trees/Ancestors/LowestCommonAncestors":{"id":"dsaconcepts/Trees/Ancestors/LowestCommonAncestors","title":"LowestCommonAncestors","description":"1. Define a function to find the LCA:","sidebar":"tutorialSidebar"},"dsaconcepts/Trees/binarytree":{"id":"dsaconcepts/Trees/binarytree","title":"binarytree","description":"Binary Tree","sidebar":"tutorialSidebar"},"dsaconcepts/Trees/IntuitiveBinaryTrees/SameTree":{"id":"dsaconcepts/Trees/IntuitiveBinaryTrees/SameTree","title":"SameTree","description":"class Solution {","sidebar":"tutorialSidebar"},"dsaconcepts/Trees/Traversals/inordertraversal":{"id":"dsaconcepts/Trees/Traversals/inordertraversal","title":"inordertraversal","description":"Inorder Traversal","sidebar":"tutorialSidebar"},"dsaconcepts/Trees/Traversals/levelordertraversal":{"id":"dsaconcepts/Trees/Traversals/levelordertraversal","title":"levelordertraversal","description":"Level Order Traversal","sidebar":"tutorialSidebar"},"dsaconcepts/Trees/Traversals/postordertraversal":{"id":"dsaconcepts/Trees/Traversals/postordertraversal","title":"postordertraversal","description":"PostOrder Traversal","sidebar":"tutorialSidebar"},"dsaconcepts/Trees/Traversals/preordertraversal":{"id":"dsaconcepts/Trees/Traversals/preordertraversal","title":"preordertraversal","description":"PreOrder Traversal","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"intro","description":"Welcome to CrispTechy. Start Learning from the docs specially prepared for you \ud83d\ude09","sidebar":"tutorialSidebar"},"NodeJs/ChildProcess":{"id":"NodeJs/ChildProcess","title":"ChildProcess","description":"Child processes in Node.js are independent processes spawned by the main (parent) Node.js process. Each child process runs in its own memory space and operates concurrently with the parent process. Child processes can execute commands, scripts, or other Node.js scripts, enabling parallel processing and distributed computing.","sidebar":"tutorialSidebar"},"NodeJs/CommonJs":{"id":"NodeJs/CommonJs","title":"CommonJs","description":"In Node.js, the module system is based on the CommonJS pattern. CommonJS is a module specification that defines a way to organize and share reusable JavaScript code. Node.js adopted the CommonJS module system to provide a structured approach to modularize code in Node.js applications.","sidebar":"tutorialSidebar"},"NodeJs/Node_intro":{"id":"NodeJs/Node_intro","title":"Node_intro","description":"* ` Node runs on a server that is not in a browser.`","sidebar":"tutorialSidebar"},"NodeJs/Os_module":{"id":"NodeJs/Os_module","title":"Os_module","description":"In Node.js, the os module is a core module that provides various utility functions related to the operating system. It allows you to access information about the computer\'s operating system, network interfaces, and perform other OS-related operations. Here are some common functionalities provided by the os module:","sidebar":"tutorialSidebar"},"NodeJs/Pathmodule":{"id":"NodeJs/Pathmodule","title":"Pathmodule","description":"In Node.js, the path module is a core module that provides utilities for working with file and directory paths. It helps in constructing, manipulating, and resolving file paths in a platform-independent manner. The path module is useful for tasks such as joining path segments, resolving relative paths, and extracting information from file paths. Here are some common functionalities provided by the path module:","sidebar":"tutorialSidebar"},"OOPS/Cohesion_Coupling":{"id":"OOPS/Cohesion_Coupling","title":"Cohesion_Coupling","description":"Cohesion and Coupling in OOPs","sidebar":"tutorialSidebar"},"OOPS/OOPS_IN_CPP":{"id":"OOPS/OOPS_IN_CPP","title":"OOPS in C++","description":"Hello everyone, and welcome to this blog post. Today, we will discuss Object-Oriented Programming (OOP) in C++. This article will provide a brief overview of the essential concepts in OOP in C++.","sidebar":"tutorialSidebar"}}}')}}]);