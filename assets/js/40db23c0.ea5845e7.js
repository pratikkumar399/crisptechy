"use strict";(self.webpackChunkcrisptechy=self.webpackChunkcrisptechy||[]).push([[686],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},d="mdxType",l={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=p(t),f=a,m=d["".concat(s,".").concat(f)]||d[f]||l[f]||o;return t?r.createElement(m,c(c({ref:n},u),{},{components:t})):r.createElement(m,c({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,c=new Array(o);c[0]=f;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[d]="string"==typeof e?e:a,c[1]=i;for(var p=2;p<o;p++)c[p]=t[p];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},5265:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>l,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=t(7462),a=(t(7294),t(3905));const o={},c=void 0,i={unversionedId:"dsaconcepts/Graphs/bfsalgorithms",id:"dsaconcepts/Graphs/bfsalgorithms",title:"bfsalgorithms",description:"",source:"@site/docs/dsaconcepts/Graphs/bfsalgorithms.md",sourceDirName:"dsaconcepts/Graphs",slug:"/dsaconcepts/Graphs/bfsalgorithms",permalink:"/crisptechy/docs/dsaconcepts/Graphs/bfsalgorithms",draft:!1,editUrl:"https://github.com/pratikkumar399/crisptechy/tree/master/docs/dsaconcepts/Graphs/bfsalgorithms.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"KhansAlgorithm",permalink:"/crisptechy/docs/dsaconcepts/Graphs/KhansAlgorithm"},next:{title:"cycle_dfs_bfs_undirected",permalink:"/crisptechy/docs/dsaconcepts/Graphs/cycle_dfs_bfs_undirected"}},s={},p=[],u={toc:p},d="wrapper";function l(e){let{components:n,...t}=e;return(0,a.kt)(d,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'\n#include<bits/stdc++.h> \nusing namespace std ;\n\nclass Graph{\n \n  int V ;\n  vector<vector<int>> adj;\n  public : \n  Graph(int V) ; // constructor\n  // function to add an edge to the graph\n  void addEdge(int v , int u) ; \n  // function to do bfs traversal from a given source\n  void bfs(int source) ;\n\n};\n\nGraph::Graph(int V){\n    this->V = V ;\n    adj.resize(V) ;\n}\nvoid Graph::addEdge(int v, int u)\n{\n    adj[v].push_back(u);\n    adj[u].push_back(v);\n}\n\nvoid Graph::bfs(int source){\n    // mark all the vertices as not visited \n    vector<bool> visited(V , false) ;\n    // create a queue a bfs \n    queue<int> q ;\n    visited[source] = true ;\n    q.push(source) ;\n\n    while(!q.empty()){\n        // dequeue a vertex from queue\n        int u= q.front() ;\n        cout<<u<<" "<<endl ;\n        q.pop() ;\n        for(auto v : adj[u]){\n            if(!visited[v]){\n                visited[v] = true ;\n                q.push(v) ;\n            }\n        }\n    }\n\n\n}\n\nint main(){\n    int n, m;\n    cin >> n >> m;\n    // adjacency list for undirected graph\n    // time complexity: O(2E)\n\n    Graph g(n) ;\n    vector<int> adj[n];\n    for (int i = 0; i < m; i++)\n    {\n        int u, v;\n        cin >> u >> v;\n        g.addEdge(u , v) ;\n    }\n    int start ;\n    cin>> start ;\n\n    g.bfs(2) ;\n\n\n    return 0 ;\n}\n\n')))}l.isMDXComponent=!0}}]);