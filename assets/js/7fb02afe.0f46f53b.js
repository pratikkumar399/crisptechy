"use strict";(self.webpackChunkcrisptechy=self.webpackChunkcrisptechy||[]).push([[5165],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>f});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=n.createContext({}),i=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):s(s({},r),e)),t},p=function(e){var r=i(e.components);return n.createElement(c.Provider,{value:r},e.children)},u="mdxType",v={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=i(t),d=a,f=u["".concat(c,".").concat(d)]||u[d]||v[d]||o;return t?n.createElement(f,s(s({ref:r},p),{},{components:t})):n.createElement(f,s({ref:r},p))}));function f(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=d;var l={};for(var c in r)hasOwnProperty.call(r,c)&&(l[c]=r[c]);l.originalType=e,l[u]="string"==typeof e?e:a,s[1]=l;for(var i=2;i<o;i++)s[i]=t[i];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3674:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>s,default:()=>v,frontMatter:()=>o,metadata:()=>l,toc:()=>i});var n=t(7462),a=(t(7294),t(3905));const o={},s=void 0,l={unversionedId:"dsaconcepts/Trees/Traversals/levelordertraversal",id:"dsaconcepts/Trees/Traversals/levelordertraversal",title:"levelordertraversal",description:"Level Order Traversal",source:"@site/docs/dsaconcepts/Trees/Traversals/levelordertraversal.md",sourceDirName:"dsaconcepts/Trees/Traversals",slug:"/dsaconcepts/Trees/Traversals/levelordertraversal",permalink:"/crisptechy/docs/dsaconcepts/Trees/Traversals/levelordertraversal",draft:!1,editUrl:"https://github.com/pratikkumar399/crisptechy/tree/master/docs/dsaconcepts/Trees/Traversals/levelordertraversal.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"inordertraversal",permalink:"/crisptechy/docs/dsaconcepts/Trees/Traversals/inordertraversal"},next:{title:"postordertraversal",permalink:"/crisptechy/docs/dsaconcepts/Trees/Traversals/postordertraversal"}},c={},i=[{value:"Level Order Traversal",id:"level-order-traversal",level:2}],p={toc:i},u="wrapper";function v(e){let{components:r,...t}=e;return(0,a.kt)(u,(0,n.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"level-order-traversal"},"Level Order Traversal"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"In level Order Traversal we basically store the nodes of each of the level together . "),(0,a.kt)("li",{parentName:"ul"},"it is a bfs algorithm")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {    \npublic:\n    vector<vector<int>> levelOrder(TreeNode* root) {\n        vector<vector<int>>  ans ;\n       if(root == NULL) return ans ;\n        queue<TreeNode*> q ;\n      \n        q.push(root) ;\n       \n        while(!q.empty()){\n          int size = q.size() ;\n          vector<int>  res ;\n          \n          for(int i = 0 ; i < size ; i++){\n            auto top = q.front();\n            q.pop();\n            if(top->left != NULL) q.push(top->left);\n            if(top->right != NULL) q.push(top->right);\n            res.push_back(top->val) ;\n          }\n            ans.push_back(res); \n        }\n        return ans ;\n    }\n};\n")))}v.isMDXComponent=!0}}]);