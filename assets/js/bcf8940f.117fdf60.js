"use strict";(self.webpackChunkcrisptechy=self.webpackChunkcrisptechy||[]).push([[7685],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=o,f=u["".concat(s,".").concat(m)]||u[m]||h[m]||i;return n?r.createElement(f,a(a({ref:t},p),{},{components:n})):r.createElement(f,a({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3764:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const i={},a=void 0,l={unversionedId:"DSA BLOGS/Graphs/KhansAlgorithm",id:"DSA BLOGS/Graphs/KhansAlgorithm",title:"KhansAlgorithm",description:"Khan's Algorithm for topoSort",source:"@site/docs/DSA BLOGS/Graphs/KhansAlgorithm.md",sourceDirName:"DSA BLOGS/Graphs",slug:"/DSA BLOGS/Graphs/KhansAlgorithm",permalink:"/crisptechy/docs/DSA BLOGS/Graphs/KhansAlgorithm",draft:!1,editUrl:"https://github.com/pratikkumar/crisptechy/docs/DSA BLOGS/Graphs/KhansAlgorithm.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"graphrepresentation",permalink:"/crisptechy/docs/DSA BLOGS/Graphs/graphrepresentation"},next:{title:"topologicalsort",permalink:"/crisptechy/docs/DSA BLOGS/Graphs/topologicalsort"}},s={},c=[{value:"Khan&#39;s Algorithm for topoSort",id:"khans-algorithm-for-toposort",level:4}],p={toc:c},u="wrapper";function h(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h4",{id:"khans-algorithm-for-toposort"},"Khan's Algorithm for topoSort"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Here we are going to talk about Khan's algorithm for toposort"),(0,o.kt)("ul",{parentName:"blockquote"},(0,o.kt)("li",{parentName:"ul"},"We already saw the implementation of the toposort algorithm using dfs."),(0,o.kt)("li",{parentName:"ul"},"Let's look at the implementation of the toposort algorithm using bfs traversal algorithm ."),(0,o.kt)("li",{parentName:"ul"},"So basicallly the concept is that we will store the indegree of each of the nodes in a indegree vector "),(0,o.kt)("li",{parentName:"ul"},"If the indegree of any of the node is zero then we push that in the queue"),(0,o.kt)("li",{parentName:"ul"},"Now we will go through the queue"),(0,o.kt)("li",{parentName:"ul"},"Take out the front node of the queue and store that in the answer vector"),(0,o.kt)("li",{parentName:"ul"},"Now, reduce the indegree of the adjacent nodes"),(0,o.kt)("li",{parentName:"ul"},"And in the process if the indegree of any of the nodes is zero then we push that in the queue. "),(0,o.kt)("li",{parentName:"ul"},"Finally when we return the answer vector , we will have out required answer"),(0,o.kt)("li",{parentName:"ul"},"Now if at any point of time the queue becomes empty and any of the node is still left to traverse then it means that there is a cycle in the graph and therefore its indegree never becomes zero. "))),(0,o.kt)("p",null,"Code for Toposort using Khan's algorithm \u2b07\ufe0f"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <vector>\n#include <queue>\n\nusing namespace std;\n\nvector<int> topoSort(vector<vector<int>>& graph, int n) {\n    vector<int> inDegree(n, 0);\n    queue<int> q;\n    vector<int> result;\n\n    // Calculate in-degree for each vertex\n    for (int i = 0; i < n; i++) {\n        for (auto neighbor : graph[i]) {\n            inDegree[neighbor]++;\n        }\n    }\n\n    // Enqueue vertices with in-degree 0\n    for (int i = 0; i < n; i++) {\n        if (inDegree[i] == 0) {\n            q.push(i);\n        }\n    }\n\n    // Process the vertices in the queue\n    while (!q.empty()) {\n        int curr = q.front();\n        q.pop();\n        result.push_back(curr);\n\n        // Decrement in-degree of neighbors\n        for (auto neighbor : graph[curr]) {\n            inDegree[neighbor]--;\n            if (inDegree[neighbor] == 0) {\n                q.push(neighbor);\n            }\n        }\n    }\n\n    return result;\n}\n\nint main() {\n    int n, m;\n    cin >> n >> m;\n\n    // Construct the graph\n    vector<vector<int>> graph(n);\n    for (int i = 0; i < m; i++) {\n        int u, v;\n        cin >> u >> v;\n        graph[u].push_back(v);\n    }\n\n    // Topological sort\n    vector<int> result = topoSort(graph, n);\n\n    // Print the result\n    for (auto vertex : result) {\n        cout << vertex << " ";\n    }\n    cout << endl;\n\n    return 0;\n}\n\n\n')))}h.isMDXComponent=!0}}]);