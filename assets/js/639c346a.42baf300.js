"use strict";(self.webpackChunkcrisptechy=self.webpackChunkcrisptechy||[]).push([[3877],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var a=r.createContext({}),c=function(e){var t=r.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(a.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,a=e.parentName,l=u(e,["components","mdxType","originalType","parentName"]),p=c(n),h=i,f=p["".concat(a,".").concat(h)]||p[h]||m[h]||s;return n?r.createElement(f,o(o({ref:t},l),{},{components:n})):r.createElement(f,o({ref:t},l))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,o=new Array(s);o[0]=h;var u={};for(var a in t)hasOwnProperty.call(t,a)&&(u[a]=t[a]);u.originalType=e,u[p]="string"==typeof e?e:i,o[1]=u;for(var c=2;c<s;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},3270:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>u,toc:()=>c});var r=n(7462),i=(n(7294),n(3905));const s={},o=void 0,u={unversionedId:"DsaInteviewQuestions/LongestConsecutiveSequence",id:"DsaInteviewQuestions/LongestConsecutiveSequence",title:"LongestConsecutiveSequence",description:"Longest Consecutive Sequence",source:"@site/interviewseries/DsaInteviewQuestions/LongestConsecutiveSequence.md",sourceDirName:"DsaInteviewQuestions",slug:"/DsaInteviewQuestions/LongestConsecutiveSequence",permalink:"/crisptechy/interviewseries/DsaInteviewQuestions/LongestConsecutiveSequence",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"interviewSeries",previous:{title:"LargestSubarraywith0sum",permalink:"/crisptechy/interviewseries/DsaInteviewQuestions/LargestSubarraywith0sum"},next:{title:"MajorityElement",permalink:"/crisptechy/interviewseries/DsaInteviewQuestions/MajorityElement"}},a={},c=[{value:"Longest Consecutive Sequence",id:"longest-consecutive-sequence",level:2}],l={toc:c},p="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"longest-consecutive-sequence"},"Longest Consecutive Sequence"),(0,i.kt)("p",null,"Problem Statement: Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence."),(0,i.kt)("p",null,"You must write an algorithm that runs in O(n) time."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Example 1:\n\nInput: nums = [100,4,200,1,3,2]\nOutput: 4\nExplanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.\n\n")),(0,i.kt)("p",null,"Brute Force technique would be to sort the array and then find the longest consecutive sequence. This would take O(nlogn) time complexity."),(0,i.kt)("p",null,"Let's implement brute force first : "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"\nclass Solution{\n    public:\n        int longestConsecutive(vector<int>& nums) {\n            if (nums.size() == 0) return 0;\n            sort(nums.begin(), nums.end());\n            int longestStreak = 1;\n            int currentStreak = 1;\n            for (int i = 1; i < nums.size(); i++) {\n                if (nums[i] != nums[i - 1]) {\n                    if (nums[i] == nums[i - 1] + 1) {\n                        currentStreak += 1;\n                    } else {\n                        longestStreak = max(longestStreak, currentStreak);\n                        currentStreak = 1;\n                    }\n                }\n            }\n            return max(longestStreak, currentStreak);\n        }\n};\n\n")),(0,i.kt)("p",null,"Complexity Analysis:\nTime complexity : O(nlgn).\nSpace complexity : O(1)."),(0,i.kt)("p",null,"Let's try to do better than this."),(0,i.kt)("p",null,"Intuition : It turns out that our initial brute force solution was on the right track, but missing a few optimizations necessary to reach O(n) time complexity."),(0,i.kt)("p",null,"Algorithm :"),(0,i.kt)("p",null,"This optimized algorithm contains only two changes from the brute force approach: the numbers are stored in a HashSet (or Set, in Python) to allow O(1)O(1) lookups, and we only attempt to build sequences from numbers that are not already part of a longer sequence. This is accomplished by first ensuring that the number that would immediately precede the current number in a sequence is not present, as that number would necessarily be part of a longer sequence."),(0,i.kt)("p",null,"Let's go through the implementation:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"\nclass Solution {\n    public:\n        int longestConsecutive(vector<int>& nums) {\n            unordered_set<int> num_set;\n            for (int num : nums) {\n                num_set.insert(num);\n            }\n\n            int longestStreak = 0;\n            // lets iterate over the set\n            for (int num : num_set) {\n                // step 1 : check if the number is the start of the sequence\n                if (!num_set.count(num - 1)) {\n                    // if it is the start of the sequence then we need to find the length of the sequence\n                    int currentNum = num;\n                    int currentStreak = 1;\n                    // lets find the length of the sequence\n                    // we will keep on incrementing the currentNum until we find the next number in the sequence\n                    while (num_set.count(currentNum + 1)) {\n                        currentNum += 1;\n                        currentStreak += 1;\n                    }\n\n                    longestStreak = max(longestStreak, currentStreak);\n                }\n            }\n\n            return longestStreak;\n        }\n};\n\n")))}m.isMDXComponent=!0}}]);