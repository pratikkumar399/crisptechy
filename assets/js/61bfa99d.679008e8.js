"use strict";(self.webpackChunkcrisptechy=self.webpackChunkcrisptechy||[]).push([[4649],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),s=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=s(e.components);return i.createElement(l.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},h=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=s(n),h=r,m=u["".concat(l,".").concat(h)]||u[h]||f[h]||o;return n?i.createElement(m,a(a({ref:t},p),{},{components:n})):i.createElement(m,a({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=h;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[u]="string"==typeof e?e:r,a[1]=c;for(var s=2;s<o;s++)a[s]=n[s];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}h.displayName="MDXCreateElement"},3941:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>f,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var i=n(7462),r=(n(7294),n(3905));const o={},a="Pacific Atlantic Water Flow",c={unversionedId:"InteviewQuestions/PacificAtlanticWaterFlow",id:"InteviewQuestions/PacificAtlanticWaterFlow",title:"Pacific Atlantic Water Flow",description:"Description",source:"@site/interviewseries/InteviewQuestions/PacificAtlanticWaterFlow.md",sourceDirName:"InteviewQuestions",slug:"/InteviewQuestions/PacificAtlanticWaterFlow",permalink:"/crisptechy/interviewseries/InteviewQuestions/PacificAtlanticWaterFlow",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"interviewSeries",previous:{title:"Number of Islands(Leetcode #200)",permalink:"/crisptechy/interviewseries/InteviewQuestions/NumberofIslands"},next:{title:"PascalsTraingle",permalink:"/crisptechy/interviewseries/InteviewQuestions/PascalsTraingle"}},l={},s=[{value:"Description",id:"description",level:2},{value:"Solution",id:"solution",level:3}],p={toc:s},u="wrapper";function f(e){let{components:t,...o}=e;return(0,r.kt)(u,(0,i.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"pacific-atlantic-water-flow"},"Pacific Atlantic Water Flow"),(0,r.kt)("h2",{id:"description"},"Description"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Alt text",src:n(9992).Z,width:"725",height:"739"})),(0,r.kt)("p",null,"Problem Link : ",(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/pacific-atlantic-water-flow/"},"Pacific Atlantic Water Flow")),(0,r.kt)("h3",{id:"solution"},"Solution"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Approach for this : "),(0,r.kt)("ul",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ul"},"Lets first discuss how to appraoch this problem and arrive at a solution."),(0,r.kt)("li",{parentName:"ul"},"We have to return the cells which can flow to both the oceans."),(0,r.kt)("li",{parentName:"ul"},"We can use the dfs approach to solve this problem. We will start from the cells which are on the border of the matrix. "),(0,r.kt)("li",{parentName:"ul"},"And we will keep track of all the cells that can reach the oceans."),(0,r.kt)("li",{parentName:"ul"},"At last the cells reaching both the oceans will be considered as the answer cells."))))),(0,r.kt)("p",null,"Lets look at bfs approach first : "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"\nclass Solution {\npublic:\n    vector<pair<int, int>> directions = {{-1, 0}, {0, -1}, {1, 0}, {0, 1}};\n    int n, m;\n\n    void bfs(vector<vector<int>>& heights, vector<vector<bool>>& visited, queue<pair<int, int>>& q) {\n        while (!q.empty()) {\n            auto [x, y] = q.front();\n            q.pop();\n\n            for (auto it : directions) {\n                int nx = x + it.first;\n                int ny = y + it.second;\n\n                if (nx >= 0 && nx < n && ny >= 0 && ny < m && !visited[nx][ny] && heights[nx][ny] >= heights[x][y]) {\n                    visited[nx][ny] = true;\n                    q.push({nx, ny});\n                }\n            }\n        }\n    }\n\n    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {\n        n = heights.size();\n        m = heights[0].size();\n        vector<vector<int>> ans;\n        vector<vector<bool>> pac(n, vector<bool>(m, false));\n        vector<vector<bool>> atl(n, vector<bool>(m, false));\n\n        queue<pair<int, int>> pq;\n        queue<pair<int, int>> aq;\n\n        // First and last row\n        for (int i = 0; i < m; i++) {\n            pq.push({0, i});\n            aq.push({n - 1, i});\n            pac[0][i] = true;\n            atl[n - 1][i] = true;\n        }\n\n        // First and last column\n        for (int i = 0; i < n; i++) {\n            pq.push({i, 0});\n            aq.push({i, m - 1});\n            pac[i][0] = true;\n            atl[i][m - 1] = true;\n        }\n\n        // Perform BFS for the Pacific Ocean\n        bfs(heights, pac, pq);\n\n        // Perform BFS for the Atlantic Ocean\n        bfs(heights, atl, aq);\n\n        // Find the cells reachable from both oceans\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (pac[i][j] && atl[i][j]) {\n                    ans.push_back({i, j});\n                }\n            }\n        }\n\n        return ans;\n    }\n};\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Time Complexity : O(n*m)")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Space Complexity : O(n*m)")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Lets look at dfs approach now : ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"\nclass Solution {\n    public:\n        vector < pair < int, int >> directions = {{-1, 0}, {0, -1}, {1, 0}, {0, 1}};\n    int n, m; \n\n    void dfs(vector < vector < int >> & heights, vector < vector < bool >> & visited, int x, int y) {\n        visited[x][y] = true;\n\n        for (auto it: directions) {\n            int nx = x + it.first;\n            int ny = y + it.second;\n\n            if (nx >= 0 && nx < n && ny >= 0 && ny < m && !visited[nx][ny] && heights[nx][ny] >= heights[x][y]) {\n                dfs(heights, visited, nx, ny);\n            }\n        }\n    }\n\n    vector < vector < int >> pacificAtlantic(vector < vector < int >> & heights) {\n        n = heights.size();\n        m = heights[0].size();\n        vector < vector < int >> ans;\n        vector < vector < bool >> pac(n, vector < bool > (m, false));\n        vector < vector < bool >> atl(n, vector < bool > (m, false));\n\n        // First and last row\n        for (int i = 0; i < m; i++) {\n            dfs(heights, pac, 0, i);\n            dfs(heights, atl, n - 1, i);\n        }\n\n        // First and last column\n        for (int i = 0; i < n; i++) {\n            dfs(heights, pac, i, 0);\n            dfs(heights, atl, i, m - 1);\n        }\n\n        // Find the cells reachable from both oceans\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (pac[i][j] && atl[i][j]) {\n                    ans.push_back({i, j});\n                }\n            }\n        }\n\n        return ans;\n    }\n\n};\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Time Complexity : O(n*m)")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Space Complexity : O(n*m)")))}f.isMDXComponent=!0},9992:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/image-19-bf6faff98af92a1c134dc5e8ee5daa88.png"}}]);