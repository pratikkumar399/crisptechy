"use strict";(self.webpackChunkcrisptechy=self.webpackChunkcrisptechy||[]).push([[9788],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},l=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),u=s(n),m=a,h=u["".concat(p,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(h,c(c({ref:t},l),{},{components:n})):r.createElement(h,c({ref:t},l))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,c=new Array(i);c[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[u]="string"==typeof e?e:a,c[1]=o;for(var s=2;s<i;s++)c[s]=n[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3631:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>c,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const i={},c=void 0,o={unversionedId:"DSA BLOGS/Graphs/graphrepresentation",id:"DSA BLOGS/Graphs/graphrepresentation",title:"graphrepresentation",description:"So there are two ways to represent a graph",source:"@site/docs/DSA BLOGS/Graphs/graphrepresentation.md",sourceDirName:"DSA BLOGS/Graphs",slug:"/DSA BLOGS/Graphs/graphrepresentation",permalink:"/crisptechy/docs/DSA BLOGS/Graphs/graphrepresentation",draft:!1,editUrl:"https://github.com/pratikkumar399/crisptechy/docs/DSA BLOGS/Graphs/graphrepresentation.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"dijkstraalgorithm",permalink:"/crisptechy/docs/DSA BLOGS/Graphs/dijkstraalgorithm"},next:{title:"KhansAlgorithm",permalink:"/crisptechy/docs/DSA BLOGS/Graphs/KhansAlgorithm"}},p={},s=[{value:"Adjacency List",id:"adjacency-list",level:4},{value:"Adjacency Matrix",id:"adjacency-matrix",level:3}],l={toc:s},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"}," So there are two ways to represent a graph "),(0,a.kt)("ul",{parentName:"blockquote"},(0,a.kt)("li",{parentName:"ul"},"Adjacency List "),(0,a.kt)("li",{parentName:"ul"},"Adjacency Matrix"))),(0,a.kt)("h4",{id:"adjacency-list"},"Adjacency List"),(0,a.kt)("p",null,"\ud83d\udc4d Adjacency List basically is a list of adjacent vertices connected to the current vertex "),(0,a.kt)("h3",{id:"adjacency-matrix"},"Adjacency Matrix"),(0,a.kt)("p",null,"\ud83d\udc4d Adjacency Matrix is simply a 2d matrix of size n * m , where n and m are the number of vertices in the graph and graph","[i][j]"," = 1 , means that there is a connecteion between vertex i and vertex j. "),(0,a.kt)("p",null,"Graph Representation :) "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#include<bits/stdc++.h> \nusing namespace std ;\n\n\n\nint main(){\n    int n, m;\n    cin >> n >> m;\n    // adjacency list for undirected graph\n    // time complexity: O(2E)\n    vector<int> adj[n];\n    for (int i = 0; i < m; i++)\n    {\n        int u, v;\n        cin >> u >> v;\n        adj[u].push_back(v);\n        adj[v].push_back(u);\n    }\n\n    // for adjacent matrix  \n    for (int i = 0; i < m; i++)\n    {\n        int u, v;\n        cin >> u >> v;\n        adj[u][v] = 1 ;\n        adj[v][u] = 1 ;\n    }\n    \n   for(int i = 0 ; i < n ; i++){\n      cout<<i<<"->" ;\n      for(int j = 0 ; j < adj[i].size() ; j++){\n        cout<<adj[i][j]<<"," ;\n      }\n      cout<<endl ;\n   }\n    return 0 ;\n}       \n\n')))}d.isMDXComponent=!0}}]);