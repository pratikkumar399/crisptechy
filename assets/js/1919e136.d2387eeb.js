"use strict";(self.webpackChunkcrisptechy=self.webpackChunkcrisptechy||[]).push([[1292],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=l(n),m=a,f=u["".concat(c,".").concat(m)]||u[m]||p[m]||i;return n?r.createElement(f,s(s({ref:t},d),{},{components:n})):r.createElement(f,s({ref:t},d))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=m;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[u]="string"==typeof e?e:a,s[1]=o;for(var l=2;l<i;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7438:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const i={},s=void 0,o={unversionedId:"dsaconcepts/BinarySearch/FIrstandLastOccurence",id:"dsaconcepts/BinarySearch/FIrstandLastOccurence",title:"FIrstandLastOccurence",description:"Find First and Last Position of Element in Sorted Array",source:"@site/docs/dsaconcepts/BinarySearch/FIrstandLastOccurence.md",sourceDirName:"dsaconcepts/BinarySearch",slug:"/dsaconcepts/BinarySearch/FIrstandLastOccurence",permalink:"/crisptechy/docs/dsaconcepts/BinarySearch/FIrstandLastOccurence",draft:!1,editUrl:"https://github.com/pratikkumar399/crisptechy/tree/master/docs/dsaconcepts/BinarySearch/FIrstandLastOccurence.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"binarysearch",permalink:"/crisptechy/docs/dsaconcepts/BinarySearch/"},next:{title:"Knapsack",permalink:"/crisptechy/docs/dsaconcepts/DynamicProgramming/KnapSack/"}},c={},l=[{value:"Find First and Last Position of Element in Sorted Array",id:"find-first-and-last-position-of-element-in-sorted-array",level:2},{value:"Approach",id:"approach",level:3}],d={toc:l},u="wrapper";function p(e){let{components:t,...i}=e;return(0,a.kt)(u,(0,r.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"find-first-and-last-position-of-element-in-sorted-array"},"Find First and Last Position of Element in Sorted Array"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Alt text",src:n(7853).Z,width:"991",height:"794"})),(0,a.kt)("h3",{id:"approach"},"Approach"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Use binary search with a small tweak."),(0,a.kt)("li",{parentName:"ul"},"Two search operations will be required, one for the left side and one for the right side."),(0,a.kt)("li",{parentName:"ul"},"In the left side if we find the target, store that in the result and move left , because there can be a possibility of another target element in the left side."),(0,a.kt)("li",{parentName:"ul"},"In the right side if we find the target, store that in the result and move right , because there can be a possibility of another target element in the right side.")),(0,a.kt)("p",null,"Code : "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    \n    int binarysearch(vector<int> &nums ,int target){\n        int start = 0 ;\n        int end = nums.size() - 1 ;\n        int result = -1 ;\n        \n        while(start <= end){\n            int mid = start + (end -start) /2 ;\n            \n            if(nums[mid] == target){\n                // you found an answer , now store it\n                result = mid ;\n                // and move towards left\n                end = mid - 1 ;\n            }\n            else if(target  < nums[mid]){\n                end = mid - 1 ;\n            }\n            else{\n               start = mid + 1 ; \n            }\n        }\n        return result ;\n    } \n    \n    \n     int binarysearch2(vector<int> &nums ,int target){\n        int start = 0 ;\n        int end = nums.size() - 1 ;\n        int result = -1 ;\n        \n        while(start <= end){\n            int mid = start + (end -start) /2 ;\n            \n            if(nums[mid] == target){\n                // you found an answer not store it\n                result = mid ;\n                // and move towards right\n                start = mid + 1 ;\n            }\n            else if(target  < nums[mid]){\n                end = mid - 1 ;\n            }\n            else{\n                start = mid + 1 ; \n            }\n        }\n         return result ;\n    } \n    \n    vector<int> searchRange(vector<int>& nums, int target) {\n        \n        int first = binarysearch(nums,target) ;\n        int last = binarysearch2(nums,target) ;\n        \n        vector<int> out ;\n        out.push_back(first) ;\n        out.push_back(last) ;\n        \n        return out ;\n         \n    }\n};\n\n// Time Complexity : O(log n) + O(log n) = O(log n)\n// Space Complexity : O(N) for the output vector  \n\n")))}p.isMDXComponent=!0},7853:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/image-2df4753ba0421f2141fe022d8ed249b1.png"}}]);