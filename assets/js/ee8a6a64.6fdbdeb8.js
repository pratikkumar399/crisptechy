"use strict";(self.webpackChunkcrisptechy=self.webpackChunkcrisptechy||[]).push([[2038],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),m=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=m(e.components);return a.createElement(o.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=m(n),d=r,g=u["".concat(o,".").concat(d)]||u[d]||c[d]||i;return n?a.createElement(g,s(s({ref:t},p),{},{components:n})):a.createElement(g,s({ref:t},p))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=d;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[u]="string"==typeof e?e:r,s[1]=l;for(var m=2;m<i;m++)s[m]=n[m];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7595:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>m});var a=n(7462),r=(n(7294),n(3905));const i={},s=void 0,l={unversionedId:"OperatingSystem/BasicsOsQuestions",id:"OperatingSystem/BasicsOsQuestions",title:"BasicsOsQuestions",description:"1. What is an operating system?",source:"@site/interviewseries/OperatingSystem/BasicsOsQuestions.md",sourceDirName:"OperatingSystem",slug:"/OperatingSystem/BasicsOsQuestions",permalink:"/crisptechy/interviewseries/OperatingSystem/BasicsOsQuestions",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"interviewSeries",previous:{title:"UniquePaths",permalink:"/crisptechy/interviewseries/DsaInteviewQuestions/UniquePaths"},next:{title:"Latency in system design",permalink:"/crisptechy/interviewseries/SystemDesign/Latency"}},o={},m=[{value:"<code>1. What is an operating system?</code>",id:"1-what-is-an-operating-system",level:3},{value:"<code>02. Explain the main functions of an operating system.</code>",id:"02-explain-the-main-functions-of-an-operating-system",level:3},{value:"<code>03.\tDescribe the difference between a process and a thread.</code>",id:"03describe-the-difference-between-a-process-and-a-thread",level:3},{value:"<code>04.\tWhat are the differences between multiprogramming, multitasking, and multiprocessing?</code>",id:"04what-are-the-differences-between-multiprogramming-multitasking-and-multiprocessing",level:3}],p={toc:m},u="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",{id:"1-what-is-an-operating-system"},(0,r.kt)("inlineCode",{parentName:"h3"},"1. What is an operating system?")),(0,r.kt)("p",null,"An operating system is a program that acts as an interface between the user and the computer hardware and controls the execution of all kinds of programs."),(0,r.kt)("h3",{id:"02-explain-the-main-functions-of-an-operating-system"},(0,r.kt)("inlineCode",{parentName:"h3"},"02. Explain the main functions of an operating system.")),(0,r.kt)("p",null,"Operating system performs the following functions: "),(0,r.kt)("u",null,"1. Process Manangement :"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Task Scheduling"),": The OS decides which processes should run and when, managing the execution order to optimize CPU usage."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Creation and Termination"),": The OS creates, terminates, and manages processes, including allocating resources and maintaining the process life cycle.")),(0,r.kt)("u",null," 2. Memory management: "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Memory Allocation"),": The OS allocates memory to processes and programs, ensuring that each process has enough memory to execute."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Virtual Memory"),": The OS creates the illusion of having more memory than the system actually has, by using disk space to simulate RAM.")),(0,r.kt)("u",null," 3. File System Management: "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"File Creation and Deletion"),": The OS creates and deletes files and directories, and manages the file system structure."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"File Access Control"),": Manages permissions and access control to ensure the security and integrity of files and data.")),(0,r.kt)("u",null," 4. Device Management: "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Device Drivers"),": The OS manages device drivers, which are programs that control the devices connected to the computer."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Interrupt Handling"),": The OS handles interrupts, which are signals sent to the CPU by external devices to request attention.")),(0,r.kt)("u",null," 5. Security: "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"User Authentication"),": The OS authenticates users to ensure that only authorized users can access the system."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"User Authorization"),": The OS authorizes users to ensure that each user has the correct permissions to access the system.")),(0,r.kt)("h3",{id:"03describe-the-difference-between-a-process-and-a-thread"},(0,r.kt)("inlineCode",{parentName:"h3"},"03.\tDescribe the difference between a process and a thread.")),(0,r.kt)("p",null,"Here's a tabular representation highlighting the key differences between a process and a thread:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Characteristic"),(0,r.kt)("th",{parentName:"tr",align:null},"Process"),(0,r.kt)("th",{parentName:"tr",align:null},"Thread"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Definition")),(0,r.kt)("td",{parentName:"tr",align:null},"An independent program with its own memory space, resources, and state."),(0,r.kt)("td",{parentName:"tr",align:null},"A lightweight unit of a process, sharing the same resources and memory space with other threads in the same process.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Execution")),(0,r.kt)("td",{parentName:"tr",align:null},"Each process runs independently of others, in its own memory space."),(0,r.kt)("td",{parentName:"tr",align:null},"Threads within a process share the same memory space and resources, running concurrently.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Communication")),(0,r.kt)("td",{parentName:"tr",align:null},"Inter-process communication is typically achieved through mechanisms like message passing or shared memory."),(0,r.kt)("td",{parentName:"tr",align:null},"Threads within the same process communicate directly using shared data and variables.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Creation Overhead")),(0,r.kt)("td",{parentName:"tr",align:null},"Higher overhead in terms of resources and time due to separate memory space and resources."),(0,r.kt)("td",{parentName:"tr",align:null},"Lower overhead as threads share resources and memory within the same process.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Resource Isolation")),(0,r.kt)("td",{parentName:"tr",align:null},"Processes are isolated; changes in one process do not affect others."),(0,r.kt)("td",{parentName:"tr",align:null},"Threads within the same process share resources, and changes in one thread may affect others.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Fault Tolerance")),(0,r.kt)("td",{parentName:"tr",align:null},"More fault-tolerant since a failure in one process does not affect others."),(0,r.kt)("td",{parentName:"tr",align:null},"Less fault-tolerant as a failure in one thread may affect the entire process.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Scalability")),(0,r.kt)("td",{parentName:"tr",align:null},"Generally less scalable due to the overhead of managing separate processes."),(0,r.kt)("td",{parentName:"tr",align:null},"More scalable as threads within a process can be managed more efficiently.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Context Switching")),(0,r.kt)("td",{parentName:"tr",align:null},"Context switching between processes is generally more expensive."),(0,r.kt)("td",{parentName:"tr",align:null},"Context switching between threads within the same process is less expensive.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Example")),(0,r.kt)("td",{parentName:"tr",align:null},"Running multiple instances of a word processor, each with its own memory space."),(0,r.kt)("td",{parentName:"tr",align:null},"A web browser with multiple threads for handling user input, rendering, and network communication.")))),(0,r.kt)("h3",{id:"04what-are-the-differences-between-multiprogramming-multitasking-and-multiprocessing"},(0,r.kt)("inlineCode",{parentName:"h3"},"04.\tWhat are the differences between multiprogramming, multitasking, and multiprocessing?")),(0,r.kt)("p",null,"Here's a table summarizing the key differences between multiprogramming, multitasking, and multiprocessing:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Characteristic"),(0,r.kt)("th",{parentName:"tr",align:null},"Multiprogramming"),(0,r.kt)("th",{parentName:"tr",align:null},"Multitasking"),(0,r.kt)("th",{parentName:"tr",align:null},"Multiprocessing"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Basic Concept")),(0,r.kt)("td",{parentName:"tr",align:null},"Multiple programs are loaded into memory simultaneously, and CPU switches between them to increase CPU utilization."),(0,r.kt)("td",{parentName:"tr",align:null},"A single CPU executes multiple tasks concurrently by rapidly switching between them."),(0,r.kt)("td",{parentName:"tr",align:null},"Multiple processors (or CPU cores) execute tasks simultaneously.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"CPU Utilization")),(0,r.kt)("td",{parentName:"tr",align:null},"Aims to maximize CPU utilization by keeping it busy with different programs."),(0,r.kt)("td",{parentName:"tr",align:null},"Aims to maximize CPU utilization by allowing the CPU to switch rapidly between tasks."),(0,r.kt)("td",{parentName:"tr",align:null},"Aims to maximize overall system throughput by executing multiple tasks in parallel on multiple processors.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Resource Sharing")),(0,r.kt)("td",{parentName:"tr",align:null},"Resources such as memory and I/O devices are shared among multiple programs."),(0,r.kt)("td",{parentName:"tr",align:null},"Resources are shared among multiple tasks running on a single CPU."),(0,r.kt)("td",{parentName:"tr",align:null},"Resources are shared among multiple tasks running on multiple processors.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Concurrency")),(0,r.kt)("td",{parentName:"tr",align:null},"Achieves concurrency by interleaving the execution of multiple programs."),(0,r.kt)("td",{parentName:"tr",align:null},"Achieves concurrency by rapidly switching between different tasks."),(0,r.kt)("td",{parentName:"tr",align:null},"Achieves true parallelism by having multiple processors working on different tasks simultaneously.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Examples")),(0,r.kt)("td",{parentName:"tr",align:null},"Running multiple text editors, compilers, or applications concurrently."),(0,r.kt)("td",{parentName:"tr",align:null},"Running a web browser, music player, and word processor concurrently on a single CPU."),(0,r.kt)("td",{parentName:"tr",align:null},"Running scientific simulations, video rendering, and database queries concurrently on a system with multiple processors.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Hardware Impact")),(0,r.kt)("td",{parentName:"tr",align:null},"Can be implemented on a system with a single CPU."),(0,r.kt)("td",{parentName:"tr",align:null},"Can be implemented on a system with a single CPU or multiple CPUs."),(0,r.kt)("td",{parentName:"tr",align:null},"Requires multiple processors or CPU cores in the system.")))),(0,r.kt)("p",null,"These distinctions highlight the key features and goals of multiprogramming, multitasking, and multiprocessing, providing a clearer understanding of their roles in enhancing system performance and resource utilization."))}c.isMDXComponent=!0}}]);