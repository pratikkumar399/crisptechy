"use strict";(self.webpackChunkcrisptechy=self.webpackChunkcrisptechy||[]).push([[2844],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>d});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=n.createContext({}),l=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(i.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(r),f=a,d=u["".concat(i,".").concat(f)]||u[f]||m[f]||o;return r?n.createElement(d,s(s({ref:t},p),{},{components:r})):n.createElement(d,s({ref:t},p))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=f;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c[u]="string"==typeof e?e:a,s[1]=c;for(var l=2;l<o;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},8345:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var n=r(7462),a=(r(7294),r(3905));const o={},s=void 0,c={unversionedId:"dsaconcepts/Trees/Traversals/symmetric_traversal",id:"dsaconcepts/Trees/Traversals/symmetric_traversal",title:"symmetric_traversal",description:"Symmetric Tree",source:"@site/docs/dsaconcepts/Trees/Traversals/symmetric_traversal.md",sourceDirName:"dsaconcepts/Trees/Traversals",slug:"/dsaconcepts/Trees/Traversals/symmetric_traversal",permalink:"/crisptechy/docs/dsaconcepts/Trees/Traversals/symmetric_traversal",draft:!1,editUrl:"https://github.com/pratikkumar399/crisptechy/tree/master/docs/dsaconcepts/Trees/Traversals/symmetric_traversal.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"preordertraversal",permalink:"/crisptechy/docs/dsaconcepts/Trees/Traversals/preordertraversal"},next:{title:"binarytree",permalink:"/crisptechy/docs/dsaconcepts/Trees/binarytree"}},i={},l=[{value:"Symmetric Tree",id:"symmetric-tree",level:2}],p={toc:l},u="wrapper";function m(e){let{components:t,...o}=e;return(0,a.kt)(u,(0,n.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"symmetric-tree"},"Symmetric Tree"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Alt text",src:r(1654).Z,width:"823",height:"626"})),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"What is a symmetric tree? ")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A tree is said to be symmetric if the left subtree is a mirror image of the right subtree.")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"How to check if a tree is symmetric?")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"We can do this by checking if the left node is equal to the right node and the left subtree is a mirror image of the right subtree.")),(0,a.kt)("p",null,"Dfs code : "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"\nclass Solution {\npublic:\n    bool isSymmetric(TreeNode* root) {\n        if(root==nullptr)return false;\n        return test(root->left,root->right);\n    }\n\n    bool test(TreeNode *left,Tre    eNode *right){\n        if(left==nullptr or right==nullptr)return false;\n        // if the left node is not equal to the right node then return false\n        if(left->val!=right->val)return false;\n        return test(left->left,right->right) and test(left->right,right->left);\n    }\n};\n\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Time Complexity : O(n)\nSpace Complexity : O(n) for worst case , in case of balanced tree it is O(log N)")))}m.isMDXComponent=!0},1654:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/image-1-d043ccc5ce36db130ee62b12d2c69af1.png"}}]);