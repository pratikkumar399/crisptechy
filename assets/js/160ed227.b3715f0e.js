"use strict";(self.webpackChunkcrisptechy=self.webpackChunkcrisptechy||[]).push([[3851],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(n),f=o,h=c["".concat(s,".").concat(f)]||c[f]||d[f]||a;return n?r.createElement(h,l(l({ref:t},u),{},{components:n})):r.createElement(h,l({ref:t},u))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=f;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[c]="string"==typeof e?e:o,l[1]=i;for(var p=2;p<a;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},4702:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var r=n(7462),o=(n(7294),n(3905));const a={},l=void 0,i={unversionedId:"dsaconcepts/Trees/binarytree",id:"dsaconcepts/Trees/binarytree",title:"binarytree",description:"Binary Tree",source:"@site/docs/dsaconcepts/Trees/binarytree.md",sourceDirName:"dsaconcepts/Trees",slug:"/dsaconcepts/Trees/binarytree",permalink:"/crisptechy/docs/dsaconcepts/Trees/binarytree",draft:!1,editUrl:"https://github.com/pratikkumar399/crisptechy/tree/master/docs/dsaconcepts/Trees/binarytree.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"symmetric_traversal",permalink:"/crisptechy/docs/dsaconcepts/Trees/Traversals/symmetric_traversal"},next:{title:"intro",permalink:"/crisptechy/docs/intro"}},s={},p=[{value:"Binary Tree",id:"binary-tree",level:2}],u={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"binary-tree"},"Binary Tree"),(0,o.kt)("p",null,"A binary tree is a tree data structure where each node has at most two child nodes, referred to as the left child and the right child"),(0,o.kt)("p",null,"\u27a1\ufe0f Here's a brief overview of binary trees:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The topmost node of a binary tree is called the root node."),(0,o.kt)("li",{parentName:"ul"},"Each node can have at most two child nodes, referred to as the left child and the right child."),(0,o.kt)("li",{parentName:"ul"},"Nodes with no children are called leaf nodes."),(0,o.kt)("li",{parentName:"ul"},"The height of a binary tree is the length of the longest path from the root node to a leaf node."),(0,o.kt)("li",{parentName:"ul"},"The depth of a node is the length of the path from the root node to that node."),(0,o.kt)("li",{parentName:"ul"},"In-order traversal of a binary tree visits the left subtree, then the node itself, and then the right subtree.")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Lets see the implementation of the binary tree to understand it in more detail:"),(0,o.kt)("ul",{parentName:"blockquote"},(0,o.kt)("li",{parentName:"ul"},"There will be insertion and deletion methods for the tree"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <bits/stdc++.h>\nusing namespace std;\n\nclass Node {\npublic:\n    Node* left;\n    Node* right;\n    int val = 0;\n\n    Node(int val) {\n        left = nullptr;\n        right = nullptr;\n        this->val = val;\n    }\n};\n\n\nNode* buildTree(Node *root){\n    cout<<"Enter the value : "<<endl;\n    int data;\n    cin>>data;\n    root = new Node(data);\n\n    if(data == -1){\n        return nullptr;\n    }\n\n    cout<<"Enter the value that you want to enter in the left of : "<< data<<endl;\n    root->left = buildTree(root->left);\n    cout<<"Enter the value that you want to enter in the right : " << data<<endl;\n    root->right = buildTree(root->right);\n\n\n    return root;\n\n}\n\nclass BinaryTree {\npublic:\n    Node* root;\n    BinaryTree() {\n        root = nullptr;\n    }\n\n    void insert(int val) {\n        if (root == nullptr) {\n            root = new Node(val);\n            return;\n        }\n        queue<Node*> q;\n        q.push(root);\n\n        while (!q.empty()) {\n            auto top = q.front();\n            q.pop();\n\n            if (top->left == nullptr) {\n                top->left = new Node(val);\n                return;\n            } else if (top->right == nullptr) {\n                top->right = new Node(val);\n                return;\n            } else {\n                q.push(top->left);\n                q.push(top->right);\n            }\n        }\n    }\n\n    void levelorderTraversal(Node* root) {\n        queue<Node*> q;\n        q.push(root);\n        q.push(nullptr);\n\n        while (!q.empty()) {\n            auto front = q.front();\n          \n            q.pop();\n\n\n            if(front == nullptr){\n                cout<<endl;\n                if(!q.empty()){\n                    q.push(nullptr);\n                }\n            }\n            else{\n                cout << front->val << " ";\n                if (front->left)\n                q.push(front->left);\n                if (front->right)\n                q.push(front->right);\n            }\n\n            \n        }\n    }\n};\n\n\nvoid levelorderTraversal(Node* root) {\n        queue<Node*> q;\n        q.push(root);\n        q.push(nullptr);\n\n        while (!q.empty()) {\n            auto front = q.front();\n          \n            q.pop();\n\n\n            if(front == nullptr){\n                cout<<endl;\n                if(!q.empty()){\n                    q.push(nullptr);\n                }\n            }\n            else{\n                cout << front->val << " ";\n                if (front->left)\n                q.push(front->left);\n                if (front->right)\n                q.push(front->right);\n            }\n\n            \n        }\n    }\n\n\nint main() {\n    // BinaryTree tree;\n    // tree.insert(1);\n    // tree.insert(2);\n    // tree.insert(3);\n    // tree.insert(4);\n    // tree.insert(5);\n    // tree.insert(6);\n    // tree.insert(7);\n\n    // tree.levelorderTraversal(tree.root);\n\n    Node *root = nullptr;\n    root = buildTree(root);\n\n    levelorderTraversal(root);\n\n    return 0;\n}\n\n')))}d.isMDXComponent=!0}}]);