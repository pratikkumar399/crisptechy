"use strict";(self.webpackChunkcrisptechy=self.webpackChunkcrisptechy||[]).push([[851],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>f});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=s(r),h=o,f=p["".concat(c,".").concat(h)]||p[h]||u[h]||a;return r?n.createElement(f,i(i({ref:t},d),{},{components:r})):n.createElement(f,i({ref:t},d))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=h;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},4702:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var n=r(7462),o=(r(7294),r(3905));const a={},i=void 0,l={unversionedId:"dsaconcepts/Trees/binarytree",id:"dsaconcepts/Trees/binarytree",title:"binarytree",description:"Binary Tree",source:"@site/docs/dsaconcepts/Trees/binarytree.md",sourceDirName:"dsaconcepts/Trees",slug:"/dsaconcepts/Trees/binarytree",permalink:"/crisptechy/docs/dsaconcepts/Trees/binarytree",draft:!1,editUrl:"https://github.com/pratikkumar399/crisptechy/tree/master/docs/dsaconcepts/Trees/binarytree.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"preordertraversal",permalink:"/crisptechy/docs/dsaconcepts/Trees/Traversals/preordertraversal"},next:{title:"intro",permalink:"/crisptechy/docs/intro"}},c={},s=[{value:"Binary Tree",id:"binary-tree",level:2}],d={toc:s},p="wrapper";function u(e){let{components:t,...r}=e;return(0,o.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"binary-tree"},"Binary Tree"),(0,o.kt)("p",null,"A binary tree is a tree data structure where each node has at most two child nodes, referred to as the left child and the right child"),(0,o.kt)("p",null,"\u27a1\ufe0f Here's a brief overview of binary trees:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The topmost node of a binary tree is called the root node."),(0,o.kt)("li",{parentName:"ul"},"Each node can have at most two child nodes, referred to as the left child and the right child."),(0,o.kt)("li",{parentName:"ul"},"Nodes with no children are called leaf nodes."),(0,o.kt)("li",{parentName:"ul"},"The height of a binary tree is the length of the longest path from the root node to a leaf node."),(0,o.kt)("li",{parentName:"ul"},"The depth of a node is the length of the path from the root node to that node."),(0,o.kt)("li",{parentName:"ul"},"In-order traversal of a binary tree visits the left subtree, then the node itself, and then the right subtree.")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Lets see the implementation of the binary tree to understand it in more detail:"),(0,o.kt)("ul",{parentName:"blockquote"},(0,o.kt)("li",{parentName:"ul"},"There will be insertion and deletion methods for the tree"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"\n#include<bits/stdc++.h>\n\n// Step 1: Create a node of the binary tree \n\nclass Node{\n    \n    public:\n    int val;\n    Node *left;\n    Node *right;\n\n    Node(int val){\n        this->val = val;\n        this->left = NULL;\n        this->right = NULL;\n    };\n\n// Step 2: Creating the Binary Tree\n    class BinaryTree{\n        public:\n        BinaryTree(){\n            root = NULL;\n        }\n\n        // Iterative Insertion\n        void insert(int val){\n            if(root == NULL){\n                root = new Node(val);\n                return;\n            }\n            queue<Node*> q;\n            q.push(root);\n\n            while(!q.empty){\n                Node *currentNode =q.front();\n                q.pop();\n\n                if(currentNode->left == NULL){\n                    currentNode->left = new Node(val);\n                    return;\n                }\n                else if(currentNode->right == NULL){\n                    currentNode->right = new Node(val);\n                    return;\n                }\n                else{\n                    q.push(currentNode->left);\n                    q.push(currentNode->right);\n                }\n                    \n            }\n\n            // Recursive Implementation\n            void addNode(int v) {\n                root = addNodeHelper(root, v);\n            }\n\n            private:\n\n            Node *addNodeHelper(Node *currentNode, int val) {\n                if(currentNode == NULL){\n                    return new Node(val)\n                }\n\n                if(currentNode->left == NULL){\n                    currentNode->left = new Node(currentNode->left,val);\n                }\n                else if(currentNode->right == NULL){\n                    currentNode->right = new Node(currentNode->right,val);\n                }\n                else{\n                    currentNode->left=addNodeHelper(currentNode->left,val);\n                    currentNode->right=addNodeHelper(currentNode->right,val);\n                }\n\n                return currentNode;\n            }    \n        }\n\n\n    };\n}\n\nint main(){\n    BinaryTree tree ;\n    tree.insert(1);\n    tree.insert(2);\n    tree.insert(3);\n    tree.insert(4);\n    tree.insert(5);\n    tree.insert(6);\n    tree.insert(7);\n}\n\n")))}u.isMDXComponent=!0}}]);