"use strict";(self.webpackChunkcrisptechy=self.webpackChunkcrisptechy||[]).push([[9972],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>f});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=n.createContext({}),c=function(e){var r=n.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):s(s({},r),e)),t},p=function(e){var r=c(e.components);return n.createElement(i.Provider,{value:r},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},v=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(t),v=o,f=u["".concat(i,".").concat(v)]||u[v]||d[v]||a;return t?n.createElement(f,s(s({ref:r},p),{},{components:t})):n.createElement(f,s({ref:r},p))}));function f(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,s=new Array(a);s[0]=v;var l={};for(var i in r)hasOwnProperty.call(r,i)&&(l[i]=r[i]);l.originalType=e,l[u]="string"==typeof e?e:o,s[1]=l;for(var c=2;c<a;c++)s[c]=t[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}v.displayName="MDXCreateElement"},1318:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>i,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var n=t(7462),o=(t(7294),t(3905));const a={},s=void 0,l={unversionedId:"DSA BLOGS/Trees/Traversals/inordertraversal",id:"DSA BLOGS/Trees/Traversals/inordertraversal",title:"inordertraversal",description:"Inorder Traversal",source:"@site/docs/DSA BLOGS/Trees/Traversals/inordertraversal.md",sourceDirName:"DSA BLOGS/Trees/Traversals",slug:"/DSA BLOGS/Trees/Traversals/inordertraversal",permalink:"/crisptechy/docs/DSA BLOGS/Trees/Traversals/inordertraversal",draft:!1,editUrl:"https://github.com/pratikkumar399/crisptechy/docs/DSA BLOGS/Trees/Traversals/inordertraversal.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"binarytree",permalink:"/crisptechy/docs/DSA BLOGS/Trees/binarytree"},next:{title:"preordertraversal",permalink:"/crisptechy/docs/DSA BLOGS/Trees/Traversals/preordertraversal"}},i={},c=[{value:"Inorder Traversal",id:"inorder-traversal",level:2}],p={toc:c},u="wrapper";function d(e){let{components:r,...t}=e;return(0,o.kt)(u,(0,n.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"inorder-traversal"},"Inorder Traversal"),(0,o.kt)("p",null," Order of Traversal: left->root->right"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Iterrative DFS"),(0,o.kt)("ul",{parentName:"blockquote"},(0,o.kt)("li",{parentName:"ul"},"For iterative dfs traversals we use stack as a data structure to store the nodes of the binary tree"))),(0,o.kt)("p",null," Iterative Code for it: "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Tree{\n    public:\n    vector<int> inorderTraversal(TreeNode* root) {\n        vector<int> list;\n        stack<TreeNode*>st;\n        \n        while(!st.empty() or root !=NULL){\n            while(root != NULL){\n                st.push(root);\n                root = root->left;\n            }\n            \n            root = st.top();\n            st.pop();\n            list.push_back(root->val);\n            root= root->right;\n        }\n        return list;\n    }   \n}\n")),(0,o.kt)("p",null," Recursive Code for it: "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Tree{\n    public:\n    vector<int> inorderTraversal(TreeNode* root) {\n        vector<int> list;\n        dfs(root,list);\n        return list;\n    }\n\n    private:\n    void dfs(TreeNode* root, vector<int> list){\n        if(root == NULL){\n            return;\n        }\n        dfs(root->left,list);\n        list.push_back(root);\n        dfs(root->right,list);\n    }   \n}\n")))}d.isMDXComponent=!0}}]);