"use strict";(self.webpackChunkcrisptechy=self.webpackChunkcrisptechy||[]).push([[8645],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),c=p(n),u=i,d=c["".concat(l,".").concat(u)]||c[u]||h[u]||r;return n?a.createElement(d,o(o({ref:t},m),{},{components:n})):a.createElement(d,o({ref:t},m))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:i,o[1]=s;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9729:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const r={},o=void 0,s={unversionedId:"dsaconcepts/Graphs/UnionFIndAlgorihtm",id:"dsaconcepts/Graphs/UnionFIndAlgorihtm",title:"UnionFIndAlgorihtm",description:"OverView of the Algorithm",source:"@site/docs/dsaconcepts/Graphs/UnionFIndAlgorihtm.md",sourceDirName:"dsaconcepts/Graphs",slug:"/dsaconcepts/Graphs/UnionFIndAlgorihtm",permalink:"/crisptechy/docs/dsaconcepts/Graphs/UnionFIndAlgorihtm",draft:!1,editUrl:"https://github.com/pratikkumar399/crisptechy/tree/master/docs/dsaconcepts/Graphs/UnionFIndAlgorihtm.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"KhansAlgorithm",permalink:"/crisptechy/docs/dsaconcepts/Graphs/KhansAlgorithm"},next:{title:"bfsalgorithms",permalink:"/crisptechy/docs/dsaconcepts/Graphs/bfsalgorithms"}},l={},p=[{value:"OverView of the Algorithm",id:"overview-of-the-algorithm",level:2},{value:"Implementation",id:"implementation",level:2},{value:"Naive Implementation",id:"naive-implementation",level:3},{value:"Path Compression",id:"path-compression",level:2},{value:"Union by Rank/Size",id:"union-by-ranksize",level:2}],m={toc:p},c="wrapper";function h(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"overview-of-the-algorithm"},"OverView of the Algorithm"),(0,i.kt)("p",null,"It is an algorithm used to efficiently manage dynamic set of elements partioned into disjoint sets. Also known as ",(0,i.kt)("inlineCode",{parentName:"p"},"DisJoint Set Union")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"Merge Find Set"),"."),(0,i.kt)("p",null,"The primary operations performed by this algorihm is Union(merge two sets) and Find(Find the set to which an element belongs to)."),(0,i.kt)("p",null,"Key operations: "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"MakeSet(x)"),": Creates a new set whose only member is x."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Union(x, y)"),": Unites the dynamic sets that contain x and y, say Sx and Sy, into a new set that is the union of these two sets."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Find(x)"),": Returns a pointer to the representative of the (unique) set containing element x.")),(0,i.kt)("h2",{id:"implementation"},"Implementation"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Initial Steps:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Every element starts as a single set."),(0,i.kt)("li",{parentName:"ul"},"then we merge the sets as we go along."),(0,i.kt)("li",{parentName:"ul"},"then we combine the sets containing the elements we want to merge.")),(0,i.kt)("h3",{id:"naive-implementation"},"Naive Implementation"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Information about sets of elements will be kept in ",(0,i.kt)("inlineCode",{parentName:"li"},"parent")," array."),(0,i.kt)("li",{parentName:"ul"},"Initially, each element is in its own set, so the parent of each element is itself."),(0,i.kt)("li",{parentName:"ul"},"To create a new set, we simply add a new element to the end of the array and set its parent to itself.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"void make_set(int v) {\n    parent[v] = v;\n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"To combine two sets ",(0,i.kt)("inlineCode",{parentName:"li"},"union_sets(a,b)")," , we first find the representative of the set in which a is located, and then we find representative of the set in which b is located. If they are different, then we simply assign the parent of the first set to the second set.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"\nvoid find_sets(int v){\n    if(v == parent[v])\n        return v;\n    return find_sets(parent[v]);\n}\n\nvoid union_sets(int a, int b){\n    a = find_sets(a);\n    b = find_sets(b);\n    // if the parent of both the sets are not same then we merge them.\n    if(a != b)\n        parent[b] = a;\n}\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Here the time complexity of ",(0,i.kt)("inlineCode",{parentName:"p"},"find_sets")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"O(n)"),"  and we need to improve it.")),(0,i.kt)("h2",{id:"path-compression"},"Path Compression"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The idea is to make the nodes on the path from the node to the root point directly to the root.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"int find_sets(int v){\n    if(v == parent[v])\n        return v;\n    return parent[v] = find_sets(parent[v]);\n}\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Here the time complexity of ",(0,i.kt)("inlineCode",{parentName:"p"},"find_sets")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"O(logn)"),".")),(0,i.kt)("h2",{id:"union-by-ranksize"},"Union by Rank/Size"),(0,i.kt)("b",null,(0,i.kt)("u",null,"`Union By size`")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Here the size of the tree is used as a metric to decide which tree should be the parent."),(0,i.kt)("li",{parentName:"ul"},"The smaller tree is merged into the larger tree.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"\nvoid make_set(int v){\n    parent[v] = v;\n    // initially the size of each set is 1.\n    size[v] = 1;\n}\n\nvoid union_sets(int a, int b){\n    a = find_sets(a);\n    b = find_sets(b);\n    // if the parent of both the sets are not same then we merge them.\n    if(a != b){\n        // if the size of set a is less than the size of set b then we merge a into b.\n        if(size[a] < size[b])\n            swap(a,b);\n        parent[b] = a;\n        size[a] += size[b];\n    }\n}\n")),(0,i.kt)("b",null,(0,i.kt)("u",null,"`Union By Rank`")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Here the rank of the tree is used as a metric to decide which tree should be the parent."),(0,i.kt)("li",{parentName:"ul"},"The smaller tree is merged into the larger tree.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"\nvoid make_set(int v){\n    parent[v] = v;\n    // initially the rank of each set is 0.\n    rank[v] = 0;\n}\n\nvoid union_sets(int a, int b){\n    a = find_sets(a);\n    b = find_sets(b);\n    // if the parent of both the sets are not same then we merge them.\n    if(a != b){\n        // if the rank of set a is less than the rank of set b then we merge a into b.\n        if(rank[a] < rank[b])\n            swap(a,b);\n        parent[b] = a;\n        // if the rank of both the sets are same then we increase the rank of the set a by 1.\n        if(rank[a] == rank[b])\n            rank[a]++;\n    }\n}\n")))}h.isMDXComponent=!0}}]);