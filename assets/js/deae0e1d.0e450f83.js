"use strict";(self.webpackChunkcrisptechy=self.webpackChunkcrisptechy||[]).push([[1998],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),l=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),c=l(n),u=r,d=c["".concat(s,".").concat(u)]||c[u]||h[u]||o;return n?a.createElement(d,i(i({ref:t},m),{},{components:n})):a.createElement(d,i({ref:t},m))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[c]="string"==typeof e?e:r,i[1]=p;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},388:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>p,toc:()=>l});var a=n(7462),r=(n(7294),n(3905));const o={},i=void 0,p={unversionedId:"NodeJs/Pathmodule",id:"NodeJs/Pathmodule",title:"Pathmodule",description:"In Node.js, the path module is a core module that provides utilities for working with file and directory paths. It helps in constructing, manipulating, and resolving file paths in a platform-independent manner. The path module is useful for tasks such as joining path segments, resolving relative paths, and extracting information from file paths. Here are some common functionalities provided by the path module:",source:"@site/docs/NodeJs/Pathmodule.md",sourceDirName:"NodeJs",slug:"/NodeJs/Pathmodule",permalink:"/crisptechy/docs/NodeJs/Pathmodule",draft:!1,editUrl:"https://github.com/pratikkumar399/crisptechy/tree/master/docs/NodeJs/Pathmodule.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Os_module",permalink:"/crisptechy/docs/NodeJs/Os_module"},next:{title:"Cohesion_Coupling",permalink:"/crisptechy/docs/OOPS/Cohesion_Coupling"}},s={},l=[],m={toc:l},c="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In Node.js, the ",(0,r.kt)("inlineCode",{parentName:"p"},"path")," module is a core module that provides utilities for working with file and directory paths. It helps in constructing, manipulating, and resolving file paths in a platform-independent manner. The ",(0,r.kt)("inlineCode",{parentName:"p"},"path")," module is useful for tasks such as joining path segments, resolving relative paths, and extracting information from file paths. Here are some common functionalities provided by the ",(0,r.kt)("inlineCode",{parentName:"p"},"path")," module:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Joining Path Segments"),": The ",(0,r.kt)("inlineCode",{parentName:"p"},"path.join()")," method is used to concatenate multiple path segments into a single path."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const path = require('path');\n\nconst filePath = path.join('/myDir', 'subDir', 'file.txt');\nconsole.log(filePath); // Returns '/myDir/subDir/file.txt'\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Resolving Absolute Path"),": The ",(0,r.kt)("inlineCode",{parentName:"p"},"path.resolve()")," method resolves an absolute path by resolving relative paths against the current working directory."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const path = require('path');\n\nconst absolutePath = path.resolve('myDir', 'subDir', 'file.txt');\nconsole.log(absolutePath); // Returns '/current/working/directory/myDir/subDir/file.txt'\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Extracting Path Components"),": The ",(0,r.kt)("inlineCode",{parentName:"p"},"path.basename()")," method returns the last portion of a path, and ",(0,r.kt)("inlineCode",{parentName:"p"},"path.dirname()")," method returns the directory name of a path."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const path = require('path');\n\nconst filePath = '/myDir/subDir/file.txt';\nconsole.log(path.basename(filePath)); // Returns 'file.txt'\nconsole.log(path.dirname(filePath)); // Returns '/myDir/subDir'\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Extracting File Extension"),": The ",(0,r.kt)("inlineCode",{parentName:"p"},"path.extname()")," method returns the file extension of a path."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const path = require('path');\n\nconst filePath = '/myDir/subDir/file.txt';\nconsole.log(path.extname(filePath)); // Returns '.txt'\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Platform-Specific Path Separator"),": The ",(0,r.kt)("inlineCode",{parentName:"p"},"path.sep")," property provides the platform-specific path segment separator (",(0,r.kt)("inlineCode",{parentName:"p"},"/")," on Unix-like systems, ",(0,r.kt)("inlineCode",{parentName:"p"},"\\")," on Windows)."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const path = require('path');\n\nconsole.log(path.sep); // Returns '/' on Unix-like systems, '\\' on Windows\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Normalizing Path"),": The ",(0,r.kt)("inlineCode",{parentName:"p"},"path.normalize()")," method normalizes a path by resolving ",(0,r.kt)("inlineCode",{parentName:"p"},".")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"..")," segments."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const path = require('path');\n\nconst normalizedPath = path.normalize('/myDir/../subDir/./file.txt');\nconsole.log(normalizedPath); // Returns '/subDir/file.txt'\n")))),(0,r.kt)("p",null,"These are some of the common functionalities provided by the ",(0,r.kt)("inlineCode",{parentName:"p"},"path")," module in Node.js. The ",(0,r.kt)("inlineCode",{parentName:"p"},"path")," module offers additional methods and properties that can be used for various file path operations, making it easier to work with file paths in a cross-platform manner."))}h.isMDXComponent=!0}}]);