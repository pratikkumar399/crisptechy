"use strict";(self.webpackChunkcrisptechy=self.webpackChunkcrisptechy||[]).push([[2461],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},l="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),l=p(n),m=i,f=l["".concat(s,".").concat(m)]||l[m]||d[m]||o;return n?r.createElement(f,a(a({ref:t},u),{},{components:n})):r.createElement(f,a({ref:t},u))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[l]="string"==typeof e?e:i,a[1]=c;for(var p=2;p<o;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3510:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>p});var r=n(7462),i=(n(7294),n(3905));const o={},a="Redundant Connection",c={unversionedId:"DsaInteviewQuestions/RedundantConnection",id:"DsaInteviewQuestions/RedundantConnection",title:"Redundant Connection",description:"Problem Statement",source:"@site/interviewseries/DsaInteviewQuestions/RedundantConnection.md",sourceDirName:"DsaInteviewQuestions",slug:"/DsaInteviewQuestions/RedundantConnection",permalink:"/crisptechy/interviewseries/DsaInteviewQuestions/RedundantConnection",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"interviewSeries",previous:{title:"Pow(x,n)",permalink:"/crisptechy/interviewseries/DsaInteviewQuestions/Pow(x,n)"},next:{title:"RepeatAndMissingnumber",permalink:"/crisptechy/interviewseries/DsaInteviewQuestions/RepeatAndMissingnumber"}},s={},p=[{value:"Problem Statement",id:"problem-statement",level:2}],u={toc:p},l="wrapper";function d(e){let{components:t,...o}=e;return(0,i.kt)(l,(0,r.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"redundant-connection"},"Redundant Connection"),(0,i.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Alt text",src:n(1973).Z,width:"671",height:"594"})),(0,i.kt)("p",null,"Problem Link : ",(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/redundant-connection/"},"Redundant Connection")),(0,i.kt)("blockquote",null,(0,i.kt)("blockquote",{parentName:"blockquote"},(0,i.kt)("p",{parentName:"blockquote"},"Approach to solve this question :"))),(0,i.kt)("p",null,"\u27a1\ufe0f We see that if we have an edge that makes the graph a circle than we need to remove that edge. This is the only edge that we need to remove. "),(0,i.kt)("p",null,"Let's look at the bfs approach first: "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"\nclass Solution {\n    public:\n  \n    bool detect(int source , vector<int> &visited ,vector<vector<int>>& graph ){\n            \n            visited[source] = 1;        \n            queue<pair<int,int>>  q ;\n            \n            q.push({source,-1}) ;\n            \n            while(!q.empty()){\n                int node = q.front().first ;\n                int parent = q.front().second ;\n                q.pop() ;\n                \n            for(auto it : graph[node]){\n                if(!visited[it]){\n                    visited[it] = 1 ;\n                    q.push({it , node}) ;\n                } \n                else if(parent != it){\n                    return true ;\n                }\n            }\n                \n            }\n            \n            return false ;\n        }\n        vector<int> findRedundantConnection(vector<vector<int>>& edges) {\n            int n = edges.size() ;\n        \n            vector<vector<int>> graph(n+1) ;\n            vector<int> ans ;\n        \n            for(auto it :  edges){\n                vector<int> visited(n + 1, 0) ;\n            graph[it[0]].push_back(it[1]) ;\n            graph[it[1]].push_back(it[0]) ;\n            // after making the graph check if the edge creates a cycle or not\n                if(detect(it[0] ,visited , graph))return it  ; \n                \n            }\n        \n        return {} ;\n    }\n};\n\n\n\n")))}d.isMDXComponent=!0},1973:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/image-20-041b50da3259867b4d9d93ca8b127ca0.png"}}]);