"use strict";(self.webpackChunkcrisptechy=self.webpackChunkcrisptechy||[]).push([[83],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(r),h=i,m=u["".concat(c,".").concat(h)]||u[h]||d[h]||o;return r?n.createElement(m,a(a({ref:t},p),{},{components:r})):n.createElement(m,a({ref:t},p))}));function m(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=h;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:i,a[1]=s;for(var l=2;l<o;l++)a[l]=r[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},5533:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var n=r(7462),i=(r(7294),r(3905));const o={},a=void 0,s={unversionedId:"DSA BLOGS/Graphs/dijkstraalgorithm",id:"DSA BLOGS/Graphs/dijkstraalgorithm",title:"dijkstraalgorithm",description:"Dijkstra algorithm",source:"@site/docs/DSA BLOGS/Graphs/dijkstraalgorithm.md",sourceDirName:"DSA BLOGS/Graphs",slug:"/DSA BLOGS/Graphs/dijkstraalgorithm",permalink:"/crisptechy/docs/DSA BLOGS/Graphs/dijkstraalgorithm",draft:!1,editUrl:"https://github.com/pratikkumar399/crisptechy/tree/master/docs/DSA BLOGS/Graphs/dijkstraalgorithm.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"cycle_dfs_bfs_undirected",permalink:"/crisptechy/docs/DSA BLOGS/Graphs/cycle_dfs_bfs_undirected"},next:{title:"graphrepresentation",permalink:"/crisptechy/docs/DSA BLOGS/Graphs/graphrepresentation"}},c={},l=[{value:"Dijkstra algorithm",id:"dijkstra-algorithm",level:3}],p={toc:l},u="wrapper";function d(e){let{components:t,...r}=e;return(0,i.kt)(u,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h3",{id:"dijkstra-algorithm"},"Dijkstra algorithm"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"This is an algorithm which helps to find the shortest path between two points in a graph.")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Time complexity is O(E logV) ")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"We will use  a MIN priority queue to implement this algorithm")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"There will be a distance array which will store the distance of adjacent node from current node"),(0,i.kt)("li",{parentName:"ul"},"Initially all the nodes will be marked with distance of infinity except the source node ."),(0,i.kt)("li",{parentName:"ul"},"Now  push the source node in the priority queue along with the distance zero , becuase the distance of source node with itself is zero."),(0,i.kt)("li",{parentName:"ul"},"Take out the ditance and current node from the queue "),(0,i.kt)("li",{parentName:"ul"},"Now check if the adjacent nodes have ditance greater than the distance from the current node "),(0,i.kt)("li",{parentName:"ul"},"store the minimum dist and weight in the priority queue.")),(0,i.kt)("p",null,"Code for this algorithm : "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution\n{\npublic:\n    // Function to find the shortest distance of all the vertices\n    // from the source vertex S.\n    vector<int> dijkstra(int V, vector<vector<int>> adj[], int S)\n    {\n\n        // Create a priority queue for storing the nodes as a pair {dist,node}\n        // where dist is the distance from source to the node. \n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\n\n        // initialize the vector with max distance from source , so that \n        // initailly they are univisted \n        vector<int> distTo(V, INT_MAX);\n\n        // Source initialised with dist=0.\n        distTo[S] = 0;\n        pq.push({0, S});\n\n        // Now, pop the minimum distance node first from the min-heap\n        // and traverse for all its adjacent nodes.\n        while (!pq.empty())\n        {\n            int node = pq.top().second;\n            int dis = pq.top().first;\n            pq.pop();\n\n            // Check for all adjacent nodes of the popped out\n            // element whether the prev dist is larger than current or not.\n            for (auto it : adj[node])\n            {\n                int v = it[0];\n                int w = it[1];\n                if (dis + w < distTo[v])\n                {\n                    distTo[v] = dis + w;\n    \n                    // If current distance is smaller,\n                    // push it into the queue.\n                    pq.push({dis + w, v});\n                }\n            }\n        }\n        // Return the list containing shortest distances\n        // from source to all the nodes.\n        return distTo;\n    }\n};\n\n")))}d.isMDXComponent=!0}}]);