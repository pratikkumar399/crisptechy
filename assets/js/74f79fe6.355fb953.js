"use strict";(self.webpackChunkcrisptechy=self.webpackChunkcrisptechy||[]).push([[4362],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>g});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=n.createContext({}),c=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):s(s({},r),e)),t},p=function(e){var r=c(e.components);return n.createElement(l.Provider,{value:r},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},v=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(t),v=a,g=u["".concat(l,".").concat(v)]||u[v]||f[v]||o;return t?n.createElement(g,s(s({ref:r},p),{},{components:t})):n.createElement(g,s({ref:r},p))}));function g(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=v;var i={};for(var l in r)hasOwnProperty.call(r,l)&&(i[l]=r[l]);i.originalType=e,i[u]="string"==typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=t[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}v.displayName="MDXCreateElement"},3390:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>s,default:()=>f,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var n=t(7462),a=(t(7294),t(3905));const o={},s=void 0,i={unversionedId:"dsaconcepts/Trees/Traversals/ZigZagTraversal",id:"dsaconcepts/Trees/Traversals/ZigZagTraversal",title:"ZigZagTraversal",description:"Binary Tree ZigZag Traversal",source:"@site/docs/dsaconcepts/Trees/Traversals/ZigZagTraversal.md",sourceDirName:"dsaconcepts/Trees/Traversals",slug:"/dsaconcepts/Trees/Traversals/ZigZagTraversal",permalink:"/crisptechy/docs/dsaconcepts/Trees/Traversals/ZigZagTraversal",draft:!1,editUrl:"https://github.com/pratikkumar399/crisptechy/tree/master/docs/dsaconcepts/Trees/Traversals/ZigZagTraversal.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"SameTree",permalink:"/crisptechy/docs/dsaconcepts/Trees/IntuitiveBinaryTrees/SameTree"},next:{title:"inordertraversal",permalink:"/crisptechy/docs/dsaconcepts/Trees/Traversals/inordertraversal"}},l={},c=[{value:"Binary Tree ZigZag Traversal",id:"binary-tree-zigzag-traversal",level:2}],p={toc:c},u="wrapper";function f(e){let{components:r,...o}=e;return(0,a.kt)(u,(0,n.Z)({},p,o,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"binary-tree-zigzag-traversal"},"Binary Tree ZigZag Traversal"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Alt text",src:t(905).Z,width:"814",height:"647"})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"In this we have to print the nodes of the tree in zig zag manner"),(0,a.kt)("li",{parentName:"ul"},"This is same as level order traversal but we have to print the nodes of the tree in zig zag manner"),(0,a.kt)("li",{parentName:"ul"},"We can follow the level order traversal , but just keep in mind one thing that when the level changes make sure that we reverse the order of traversal for each level.")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Code for the question")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {\n    vector<vector<int>> ans;\n    if (root == nullptr) return ans;\n\n    queue<TreeNode*> q;\n    q.push(root);\n    bool leftToRight = true;\n\n    while (!q.empty()) {\n        int size = q.size();\n        vector<int> level;\n\n        for (int i = 0; i < size; i++) {\n            TreeNode* front = q.front();\n            q.pop();\n\n            if (leftToRight) {\n                level.push_back(front->val);\n            } else {\n                level.insert(level.begin(), front->val);\n            }\n\n            if (front->left) {\n                q.push(front->left);\n            }\n            if (front->right) {\n                q.push(front->right);\n            }\n        }\n\n        ans.push_back(level);\n        leftToRight = !leftToRight; // Toggle the direction for the next level\n    }\n\n    return ans;\n    }\n\n};\n\n")))}f.isMDXComponent=!0},905:(e,r,t)=>{t.d(r,{Z:()=>n});const n=t.p+"assets/images/image-7b12dfecadc824c92f5bc69b74a55a44.png"}}]);