"use strict";(self.webpackChunkcrisptechy=self.webpackChunkcrisptechy||[]).push([[1745],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var o=r.createContext({}),m=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=m(e.components);return r.createElement(o.Provider,{value:n},e.children)},l="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,o=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),l=m(t),d=i,h=l["".concat(o,".").concat(d)]||l[d]||p[d]||a;return t?r.createElement(h,s(s({ref:n},c),{},{components:t})):r.createElement(h,s({ref:n},c))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,s=new Array(a);s[0]=d;var u={};for(var o in n)hasOwnProperty.call(n,o)&&(u[o]=n[o]);u.originalType=e,u[l]="string"==typeof e?e:i,s[1]=u;for(var m=2;m<a;m++)s[m]=t[m];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7329:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>u,toc:()=>m});var r=t(7462),i=(t(7294),t(3905));const a={},s=void 0,u={unversionedId:"InteviewQuestions/LargestSubarraywith0sum",id:"InteviewQuestions/LargestSubarraywith0sum",title:"LargestSubarraywith0sum",description:"Largest subarray with 0 sum",source:"@site/interviewseries/InteviewQuestions/LargestSubarraywith0sum.md",sourceDirName:"InteviewQuestions",slug:"/InteviewQuestions/LargestSubarraywith0sum",permalink:"/crisptechy/interviewseries/InteviewQuestions/LargestSubarraywith0sum",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"interviewSeries",previous:{title:"FloodFill",permalink:"/crisptechy/interviewseries/InteviewQuestions/FloodFill"},next:{title:"LongestConsecutiveSequence",permalink:"/crisptechy/interviewseries/InteviewQuestions/LongestConsecutiveSequence"}},o={},m=[{value:"Largest subarray with 0 sum",id:"largest-subarray-with-0-sum",level:3}],c={toc:m},l="wrapper";function p(e){let{components:n,...t}=e;return(0,i.kt)(l,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h3",{id:"largest-subarray-with-0-sum"},"Largest subarray with 0 sum"),(0,i.kt)("p",null,"Problem Description: Given an array having both positive and negative integers. The task is to compute the length of the largest subarray with sum 0."),(0,i.kt)("p",null,"Input: arr[] = {15, -2, 2, -8, 1, 7, 10, 23};\nOutput: 5"),(0,i.kt)("p",null,"Explanation: The largest subarray with 0 sum is -2 2 -8 1 7 "),(0,i.kt)("p",null,"Brute force : "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"\nclass Solution{\n    public : \n    int maxLen(int arr[], int n){\n        int max_len = 0;\n        for(int i = 0; i < n; i++){\n            int curr_sum = 0;\n            for(int j = i; j < n; j++){\n                curr_sum += arr[j];\n                // if curr_sum is 0, then update max_len\n                if(curr_sum == 0){\n                    max_len = max(max_len, j - i + 1);\n                }\n            }\n        }\n        return max_len;\n    }\n}\n\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Time complexity : O(n^2)\nSpace complexity : O(1)\n\nLets discuss about the optimized approach ->  What we can do is that we can use a hashmap to store the sum and the index of the first occurence of that sum. If we encounter a sum which is already present in the hashmap, then we can update the max_len if the difference between the current index and the index of the first occurence of that sum is greater than the max_len. \n\n\nLets take an example to see how this works : \n\narr[] = {15, -2, 2, -8, 1, 7, 10, 23};\n\nsum = 15, index = 0\nsum = 13, index = 1\nsum = 15, index = 2\nsum = 7, index = 3\nsum = 8, index = 4\nsum = 15, index = 5\nsum = 25, index = 6\nsum = 48, index = 7\n\nNow, we can see that sum = 15 is repeated at index 5 and index 0. So, we can see that the difference between the current index and the index of the first occurence of that sum is 5 - 0 = 5. So, we can update the max_len to 5. \n\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Code for the optimized approach : ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"\n    class Solution{\n        public : \n        int maxLen(int arr[], int n){\n            unordered_map<int, int> mp;\n            int sum = 0;\n            int max_len = 0;\n            for(int i = 0; i < n; i++){\n                sum += arr[i];\n                if(sum == 0){\n                    max_len = i + 1;\n                }\n                else{\n                    if(mp.find(sum) != mp.end()){\n                        max_len = max(max_len, i - mp[sum]);\n                    }\n                    // if sum is not present in the map, then insert it at index i\n                    else{\n                        mp[sum] = i;\n                    }\n                }\n            }\n            return max_len;\n        }\n    }\n\n\n")),(0,i.kt)("p",null,"Let's dry run the above code : "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\narr[] = {15, -2, 2, -8, 1, 7, 10, 23}; \n\n\n\n\nsum = 15, index = 0\nmp[15] = 0\n\nsum = 13, index = 1\nmp[13] = 1\n\nsum = 15, index = 2\nmax_len = max(0, 2 - mp[15]) = max(0, 2 - 0) = max(0, 2) = 2\n\nsum = 7, index = 3\nmp[7] = 3\n\nsum = 8, index = 4\nmp[8] = 4\n\nsum = 15, index = 5\nmax_len = max(2, 5 - mp[15]) = max(2, 5 - 0) = max(2, 5) = 5\n\nsum = 25, index = 6\nmp[25] = 6\n\nsum = 48, index = 7\nmp[48] = 7\n\nmax_len = 5 \n\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Time complexity : O(n)\nSpace complexity : O(n)")))}p.isMDXComponent=!0}}]);